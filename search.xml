<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C#多线程孩子吃苹果</title>
    <url>/2020/07/05/C-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%AD%A9%E5%AD%90%E5%90%83%E8%8B%B9%E6%9E%9C/</url>
    <content><![CDATA[<ul>
<li>输入数字后，记得按回车（线程在不停运行时），ManualResetEvent是为了第一次输入苹果时，让线程处于阻塞状态，为了显示的效果。</li>
</ul>
<h1 id="运行效果图"><a href="#运行效果图" class="headerlink" title="运行效果图"></a>运行效果图</h1><p><img src="https://i.loli.net/2020/07/05/JI9DOmUYWR2ByKQ.png" alt="thread.png"></p>
<h1 id="果篮类"><a href="#果篮类" class="headerlink" title="果篮类"></a>果篮类</h1><pre><code>class FruitBasket
{
    // The number of apples.
    private static int appleNum = 0;

    public void AddApple(int addNumber)
    {
        lock (this)
        {
            if (appleNum &gt; 0)
            {
                Console.WriteLine(&quot;There are {0} apple(s)&quot;, appleNum);
            }
            else
            {
                appleNum += addNumber;
                // Activate the the waiting thread after putting apples.
                Program.manualResetEvent.Set();
                Console.WriteLine(&quot;There are {0} apple(s) now.&quot;, appleNum);
            }
        }
    }

    public bool ReduceApple(string name)
    {
        lock (this)
        {
            if (appleNum == 0)
            {
                Console.WriteLine(&quot;There are no apples, please add apples.&quot;);
                return false;
            }
            else
            {
                appleNum--;
                Console.WriteLine(&quot;{0} take an apple, there are {1} apple(s) left&quot;, name, appleNum);
                return true;
            }
        }
    }
}</code></pre><h1 id="生产者类"><a href="#生产者类" class="headerlink" title="生产者类"></a>生产者类</h1><pre><code>class Productor
{
    private string Name { get; set; }
    private FruitBasket FruitBasket { get; set; }

    public Productor(string name, FruitBasket fruitBasket)
    {
        this.Name = name;
        this.FruitBasket = fruitBasket;
    }

    public void PutApple()
    {
        int inputNumbner;

        Console.WriteLine(&quot;Please input the number of apples&quot;);
        while (true)
        {
            // If the input is illegal, throw a exception.
            while (!int.TryParse(Console.ReadLine(), out inputNumbner) || inputNumbner &lt; 1)
            {
                Console.WriteLine(&quot;Invalid input, please input correctly&quot;);
            }
            this.FruitBasket.AddApple(inputNumbner);
        }
    }
}</code></pre><h1 id="消费者类"><a href="#消费者类" class="headerlink" title="消费者类"></a>消费者类</h1><pre><code>class Consumer
{
    private string Name { get; set; }
    private FruitBasket Fruitbasket { get; set; }
    private int Time { get; set; }

    public Consumer(string name, FruitBasket fruitBasket, int time)
    {
        this.Name = name;
        this.Fruitbasket = fruitBasket;
        this.Time = time;
    }

    public void TakeApple()
    {         
        // Block the waiting thread before it take apples.
        Program.manualResetEvent.WaitOne();
        while (true)
        {
            if (this.Fruitbasket.ReduceApple(this.Name))
            {
                Thread.Sleep(this.Time);
            }
            else
            {
                Thread.Sleep(1000);
            }
        }
    }
}</code></pre><h1 id="Program-cs"><a href="#Program-cs" class="headerlink" title="Program.cs"></a>Program.cs</h1><pre><code>class Program
{
    // About this can be overlooked.
    public static ManualResetEvent manualResetEvent = new ManualResetEvent(false);

    static void Main(string[] args)
    {
        FruitBasket fruitBasket = new FruitBasket();
        Productor productor = new Productor(&quot;productor&quot;, fruitBasket);

        Consumer childA = new Consumer(&quot;ChildA&quot;, fruitBasket, 3000);
        Consumer childB = new Consumer(&quot;ChildB&quot;, fruitBasket, 2000);
        Consumer childC = new Consumer(&quot;ChildC&quot;, fruitBasket, 4000);

        Thread threadP = new Thread(productor.PutApple);
        Thread threadA = new Thread(childA.TakeApple);
        Thread threadB = new Thread(childB.TakeApple);
        Thread threadC = new Thread(childC.TakeApple);

        threadP.Start();
        threadA.Start();
        threadB.Start();
        threadC.Start();
    }
}</code></pre>]]></content>
      <categories>
        <category>C#</category>
      </categories>
      <tags>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo-博客搭建</title>
    <url>/2020/05/27/hexo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<ul>
<li><p>step 1: &emsp;NodeJs &amp; Git的安装不多说，别忘了就行,最好先测试一下。安装淘宝镜像源（防止速度过慢）cnpm工具安装成功后，可用 cnpm -v 测试一下      </p>
<pre><code>npm install -g cnpm --regitry=https://registry.npm.taobao.org</code></pre></li>
<li><p>step 2: &emsp;全局安装hexo框架 (熟悉时，可非全局安装)</p>
<pre><code>cnpm install -g hexo-cli</code></pre></li>
<li><p>step 3: &emsp;新建一个文件夹并进入 mkdir blog，初始化 也可直接（hexo init 文件夹名)</p>
<pre><code>hexo init (或者和blog文件夹同级时 使用 hexo init blog)</code></pre></li>
<li><p>step 4: &emsp;启动测试一下, localhost:4000，测试完成后，关闭(ctrl c)</p>
<pre><code>hexo  s </code></pre></li>
<li><p>step 5: &emsp;GitHub上创建新的仓库，仓库名格式严格按照username.github.io username为GitHub用户名，配置_config.yml，找到文件底部的 deploy 进行配置，repo 是GitHub上创建仓库的地址</p>
<pre><code>deploy:
  type: git
  repo: https://github.com/username/username.github.io
  branch: master</code></pre></li>
<li><p>step 6: &emsp; 使用下列命令部署到GitHub上，注意命令后，需输入GitHub账号的用户名和密码，可通过创建的仓库名为地址进行访问</p>
<pre><code>hexo d </code></pre></li>
<li><p>step 7: &emsp;hexo官网主题栏寻找喜欢的，找到后克隆其地址，将其克隆到本地themes文件夹下之后<br>可通过修改_config.yml 中的 theme 更换主题</p>
<pre><code>git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia</code></pre></li>
<li><p>step 8: &emsp;修改blog文件夹下的_config.yml 文件中的 theme ,更换主题</p>
<pre><code>theme: yilia</code></pre></li>
</ul>
<h2 id="域名绑定可参考"><a href="#域名绑定可参考" class="headerlink" title="域名绑定可参考"></a>域名绑定可参考</h2><ul>
<li><a href="https://www.jianshu.com/p/d6ef5f02ea18" target="_blank" rel="noopener">https://www.jianshu.com/p/d6ef5f02ea18</a></li>
</ul>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>环境搭建</tag>
      </tags>
  </entry>
</search>
